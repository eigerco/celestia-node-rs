name: CI
on:
  push:
    branches:
      - main
  pull_request:

env:
  WASM_BINDGEN_TEST_TIMEOUT: 120

jobs:
  clippy:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crate:
          - celestia-proto
          - celestia-types
          - celestia-rpc
          - celestia-grpc
          - celestia-grpc-macros
          - lumina-node
          - lumina-node-uniffi
          - lumina-node-wasm
          - lumina-cli

    steps:
    - uses: actions/checkout@v4

    - name: Setup toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: clippy
        rustflags: -D warnings
        target: wasm32-unknown-unknown
        cache-key: ${{ matrix.crate }}

    - name: Celestia devnet
      uses: ./.github/actions/local-devnet

    - name: Run clippy for native
      run: cargo clippy --all-targets --all-features -p ${{ matrix.crate }} -- --no-deps

    - name: Run clippy for wasm32
      run: cargo clippy --all-targets --all-features --target=wasm32-unknown-unknown -p ${{ matrix.crate }} -- --no-deps


  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crate:
          - celestia-proto
          - celestia-types
          - celestia-rpc
          - celestia-grpc
          - celestia-grpc-macros
          - lumina-node
          - lumina-node-uniffi
          - lumina-node-wasm
          - lumina-cli

    steps:
    - uses: actions/checkout@v4

    - name: Setup toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        cache-key: ${{ matrix.crate }}

    - name: Celestia devnet
      uses: ./.github/actions/local-devnet

    - name: Run tests
      run: cargo test --all-features -p ${{ matrix.crate }}


  wasm-test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: celestia-proto
            dir: proto
          - name: celestia-types
            dir: types
            wasm-pack-test-flags: --features=wasm-bindgen
          - name: celestia-rpc
            dir: rpc
            wasm-pack-test-flags: --features=wasm-bindgen
          - name: celestia-grpc
            dir: grpc
          - name: lumina-node
            dir: node
          - name: lumina-node-wasm
            dir: node-wasm
            # We're running node-wasm tests in release mode to get around a failing debug assertion
            # https://github.com/libp2p/rust-libp2p/issues/5618
            wasm-pack-test-flags: --release

    steps:
    - uses: actions/checkout@v4

    - name: Setup toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: clippy
        rustflags: -D warnings
        target: wasm32-unknown-unknown
        cache-key: ${{ matrix.crate.name }}

    - name: Install wasm-pack
      uses: taiki-e/install-action@v2
      with:
        tool: wasm-pack@0.13.1

    - name: Install chromedriver # we don't specify chrome version to match whatever's installed
      uses: nanasess/setup-chromedriver@v2

    - name: Celestia devnet
      uses: ./.github/actions/local-devnet

    - name: Run wasm-pack tests
      run: wasm-pack test --headless --chrome ${{ matrix.crate.dir }}  ${{ matrix.crate.wasm-pack-test-flags }}


  build-wasm:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: wasm32-unknown-unknown

    - name: Install wasm-pack
      uses: taiki-e/install-action@v2
      with:
        tool: wasm-pack@0.13.1

    - name: Build and pack node-wasm
      run: wasm-pack build node-wasm && wasm-pack pack node-wasm

    - name: Build demo webpage
      run: cd cli/js && npm ci && npm run build


  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run fmt
      run: cargo fmt -- --check


  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: clippy
        toolchain: nightly, stable
        target: wasm32-unknown-unknown

    - name: Missing docs for native
      run: cargo clippy --workspace --all-features -- -D missing-docs

    - name: Missing docs for wasm32
      run: cargo clippy --workspace --all-features --target=wasm32-unknown-unknown -- -D missing-docs

    - name: Run rustdoc check
      env:
        RUSTDOCFLAGS: --cfg docsrs -D warnings
      run: cargo +nightly doc --no-deps


<<<<<<< HEAD
  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Run fmt
      run: cargo fmt -- --check


  test-wasm:
    runs-on: ubuntu-latest
    env:
      WASM_BINDGEN_TEST_TIMEOUT: 120
    steps:
    - uses: actions/checkout@v1

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown

    - name: Install wasm-pack
      uses: taiki-e/cache-cargo-install-action@v1
      with:
        tool: wasm-pack@0.12.1

    - name: Install chromedriver # we don't specify chrome version to match whatever's installed
      uses: nanasess/setup-chromedriver@v2

    - name: Build (wasm32-unknown-unknown)
      run: cargo build --all --target=wasm32-unknown-unknown --all-features

    - name: Test proto crate
      run: wasm-pack test --headless --chrome proto

    - name: Test types crate
      run: wasm-pack test --headless --chrome types --features=wasm-bindgen

    - name: Test node crate
      run: wasm-pack test --headless --chrome node

    - name: Build and pack node-wasm
      run: wasm-pack build --release --target web node-wasm && wasm-pack pack node-wasm


  test:
    runs-on: ubuntu-latest
    env:
      WASM_BINDGEN_TEST_TIMEOUT: 120
    steps:
    - uses: actions/checkout@v1

    - name: Set up cargo cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys:
          cargo-${{ hashFiles('**/Cargo.lock') }}
          cargo-

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown

    - name: Install wasm-pack
      uses: taiki-e/cache-cargo-install-action@v1
      with:
        tool: wasm-pack@0.12.1

    - name: Install chromedriver # we don't specify chrome version to match whatever's installed
      uses: nanasess/setup-chromedriver@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # needed for the buildx in order to access gha cache
    # https://github.com/docker/bake-action/issues/36#issuecomment-1103961612
    - name: Expose github actions runtime
      uses: crazy-max/ghaction-github-runtime@v1

    - name: Build the docker-compose stack
      run: |
        cat > ci/cache.json <<EOF
        {
          "target": {
            "validator": {
              "cache-from": ["type=gha,scope=validator"],
              "cache-to": ["type=gha,mode=max,scope=validator"],
              "output": ["type=docker"]
            },
            "bridge-0": {
              "cache-from": ["type=gha,scope=bridge-0"],
              "cache-to": ["type=gha,mode=max,scope=bridge-0"],
              "output": ["type=docker"]
            },
            "bridge-1": {
              "cache-from": ["type=gha,scope=bridge-1"],
              "cache-to": ["type=gha,mode=max,scope=bridge-1"],
              "output": ["type=docker"]
            }
          }
        }
        EOF
        cd ci && docker buildx bake --file docker-compose.yml --file cache.json --load

    - name: Run the docker-compose stack
      run: docker compose -f ci/docker-compose.yml up --no-build -d

    - name: Wait for bridge node to start
      run: |
        docker compose -f ci/docker-compose.yml logs -f |
          awk '/Configuration finished. Running a bridge node/ {print;exit}'

    - name: Generate auth tokens
      run: ./tools/gen_auth_tokens.sh

    - name: Run tests
      run: cargo test

    - name: Run rpc wasm test
      run: wasm-pack test --headless --chrome rpc --features=wasm-bindgen

    - name: Run grpc wasm test
      run: wasm-pack test --headless --chrome grpc

    - name: Test node-wasm crate
      # We're running node-wasm tests in release mode to get around a failing debug assertion
      # https://github.com/libp2p/rust-libp2p/issues/5618
      run: wasm-pack test --headless --release --chrome node-wasm



=======
>>>>>>> main
  unused-deps:
    runs-on: ubuntu-latest
    name: unused dependencies
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Setup toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        # cargo complains about #[cfg(test)]
        # TODO: remove when this lands (1.85)
        # https://github.com/rust-lang/cargo/pull/14963
        # https://github.com/est31/cargo-udeps/issues/293#issuecomment-2573300340
        toolchain: nightly-2025-01-01

    - name: Install cargo-udeps
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: cargo-udeps@0.1

    - name: Check for unused dependencies
      run: cargo udeps --all-targets --all-features

  required:
    runs-on: ubuntu-latest
    name: Required checks
    if: ${{ !cancelled() }}
    needs:
    - clippy
    - test
    - wasm-test
    - build-wasm
    - fmt
    - docs
    - unused-deps

    steps:
    - name: On failure
      if: always() && contains(needs.*.result, 'failure')
      run: exit 1
